{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Abubakargithub/Chellenge2.0/blob/master/content/my_trained_model.pth\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "id": "aSyH5B57pM2p",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "c7e99d06-f7f9-4d22-84c9-f1f4fd20551c"
      },
      "cell_type": "code",
      "source": [
        "!wget -cq https://s3.amazonaws.com/content.udacity-data.com/courses/nd188/flower_data.zip\n",
        "!unzip -qq flower_data.zip"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "replace flower_data/valid/61/image_06296.jpg? [y]es, [n]o, [A]ll, [N]one, [r]ename: "
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "8TY8kwhfpqLL",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Imports here\n",
        "import torch\n",
        "from torch import nn\n",
        "from torch import optim\n",
        "from torchvision import datasets, transforms, models\n",
        "from collections import OrderedDict\n",
        "from PIL import Image\n",
        "import numpy as np\n",
        "from torch.autograd import Variable\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "uuiEUkMTroWW",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "data_dir = 'flower_data'\n",
        "train_dir = data_dir + '/train'\n",
        "valid_dir = data_dir + '/valid'\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "1D9Y_dfAr4Yc",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# TODO: Define your transforms for the training, validation, and testing sets\n",
        "train_transforms = transforms.Compose([transforms.RandomRotation(30),\n",
        "                                       transforms.Resize(255),\n",
        "                                       transforms.RandomResizedCrop(224),\n",
        "                                       transforms.RandomHorizontalFlip(),\n",
        "                                       transforms.ToTensor(),\n",
        "                                       transforms.Normalize([0.485, 0.456, 0.406], \n",
        "                                                            [0.229, 0.224, 0.225])])\n",
        "\n",
        "valid_transforms = transforms.Compose([transforms.Resize(255),\n",
        "                                 transforms.CenterCrop(224),\n",
        "                                 transforms.ToTensor(),\n",
        "                                 transforms.Normalize([0.485, 0.456, 0.406], \n",
        "                                                      [0.229, 0.224, 0.225])])\n",
        "\n",
        "\n",
        "# TODO: Load the datasets with ImageFolder\n",
        "train_data = datasets.ImageFolder(train_dir, transform = train_transforms)\n",
        "valid_data = datasets.ImageFolder(valid_dir, transform = valid_transforms)\n",
        "# TODO: Using the image datasets and the trainforms, define the dataloaders\n",
        "trainloader = torch.utils.data.DataLoader(train_data, batch_size=64, shuffle=True)\n",
        "validloader = torch.utils.data.DataLoader(valid_data, batch_size=32)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Ku7x7lPur_8w",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1751
        },
        "outputId": "80b2b901-0994-4ed7-8032-96773d1344d9"
      },
      "cell_type": "code",
      "source": [
        "import json\n",
        "\n",
        "with open('cat_to_name.json', 'r') as f:\n",
        "    cat_to_name = json.load(f)\n",
        "cat_to_name\n"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'1': 'pink primrose',\n",
              " '10': 'globe thistle',\n",
              " '100': 'blanket flower',\n",
              " '101': 'trumpet creeper',\n",
              " '102': 'blackberry lily',\n",
              " '11': 'snapdragon',\n",
              " '12': \"colt's foot\",\n",
              " '13': 'king protea',\n",
              " '14': 'spear thistle',\n",
              " '15': 'yellow iris',\n",
              " '16': 'globe-flower',\n",
              " '17': 'purple coneflower',\n",
              " '18': 'peruvian lily',\n",
              " '19': 'balloon flower',\n",
              " '2': 'hard-leaved pocket orchid',\n",
              " '20': 'giant white arum lily',\n",
              " '21': 'fire lily',\n",
              " '22': 'pincushion flower',\n",
              " '23': 'fritillary',\n",
              " '24': 'red ginger',\n",
              " '25': 'grape hyacinth',\n",
              " '26': 'corn poppy',\n",
              " '27': 'prince of wales feathers',\n",
              " '28': 'stemless gentian',\n",
              " '29': 'artichoke',\n",
              " '3': 'canterbury bells',\n",
              " '30': 'sweet william',\n",
              " '31': 'carnation',\n",
              " '32': 'garden phlox',\n",
              " '33': 'love in the mist',\n",
              " '34': 'mexican aster',\n",
              " '35': 'alpine sea holly',\n",
              " '36': 'ruby-lipped cattleya',\n",
              " '37': 'cape flower',\n",
              " '38': 'great masterwort',\n",
              " '39': 'siam tulip',\n",
              " '4': 'sweet pea',\n",
              " '40': 'lenten rose',\n",
              " '41': 'barbeton daisy',\n",
              " '42': 'daffodil',\n",
              " '43': 'sword lily',\n",
              " '44': 'poinsettia',\n",
              " '45': 'bolero deep blue',\n",
              " '46': 'wallflower',\n",
              " '47': 'marigold',\n",
              " '48': 'buttercup',\n",
              " '49': 'oxeye daisy',\n",
              " '5': 'english marigold',\n",
              " '50': 'common dandelion',\n",
              " '51': 'petunia',\n",
              " '52': 'wild pansy',\n",
              " '53': 'primula',\n",
              " '54': 'sunflower',\n",
              " '55': 'pelargonium',\n",
              " '56': 'bishop of llandaff',\n",
              " '57': 'gaura',\n",
              " '58': 'geranium',\n",
              " '59': 'orange dahlia',\n",
              " '6': 'tiger lily',\n",
              " '60': 'pink-yellow dahlia',\n",
              " '61': 'cautleya spicata',\n",
              " '62': 'japanese anemone',\n",
              " '63': 'black-eyed susan',\n",
              " '64': 'silverbush',\n",
              " '65': 'californian poppy',\n",
              " '66': 'osteospermum',\n",
              " '67': 'spring crocus',\n",
              " '68': 'bearded iris',\n",
              " '69': 'windflower',\n",
              " '7': 'moon orchid',\n",
              " '70': 'tree poppy',\n",
              " '71': 'gazania',\n",
              " '72': 'azalea',\n",
              " '73': 'water lily',\n",
              " '74': 'rose',\n",
              " '75': 'thorn apple',\n",
              " '76': 'morning glory',\n",
              " '77': 'passion flower',\n",
              " '78': 'lotus lotus',\n",
              " '79': 'toad lily',\n",
              " '8': 'bird of paradise',\n",
              " '80': 'anthurium',\n",
              " '81': 'frangipani',\n",
              " '82': 'clematis',\n",
              " '83': 'hibiscus',\n",
              " '84': 'columbine',\n",
              " '85': 'desert-rose',\n",
              " '86': 'tree mallow',\n",
              " '87': 'magnolia',\n",
              " '88': 'cyclamen',\n",
              " '89': 'watercress',\n",
              " '9': 'monkshood',\n",
              " '90': 'canna lily',\n",
              " '91': 'hippeastrum',\n",
              " '92': 'bee balm',\n",
              " '93': 'ball moss',\n",
              " '94': 'foxglove',\n",
              " '95': 'bougainvillea',\n",
              " '96': 'camellia',\n",
              " '97': 'mallow',\n",
              " '98': 'mexican petunia',\n",
              " '99': 'bromelia'}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "metadata": {
        "id": "302LNDfzsmst",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# TODO: Build and train your network\n",
        "model = models.vgg16(pretrained = True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "0sqQ6Zc9swGC",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "for param in model.parameters():\n",
        "    param.requires_grad = False\n",
        "\n",
        "\n",
        "classifier = nn.Sequential(OrderedDict([\n",
        "                          ('fc1', nn.Linear(25088, 4096)),\n",
        "                          ('relu1', nn.ReLU()),\n",
        "                          ('dropout1', nn.Dropout(p=0.5)),\n",
        "                          ('fc2', nn.Linear(4096, 512)),\n",
        "                          ('relu2', nn.ReLU()),\n",
        "                          ('dropout2', nn.Dropout(p=0.5)),\n",
        "                          ('fc3', nn.Linear(512, 102)),\n",
        "                          ('output', nn.LogSoftmax(dim=1))\n",
        "                          ]))\n",
        "    \n",
        "model.classifier = classifier"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ypZY25gFs9vA",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "criterion = nn.NLLLoss()\n",
        "optimizer = optim.Adam(model.classifier.parameters(), lr=0.001)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "oI9Aiv5ZtHQz",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Criterion and optimizer\n",
        "criterion = nn.NLLLoss()\n",
        "optimizer = optim.Adam(model.classifier.parameters(), lr=0.001)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "KLd5fMl6tRpJ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def validation(model, valid_loader, criterion):\n",
        "    valid_loss = 0\n",
        "    accuracy = 0\n",
        "    model.to('cuda')\n",
        "    for images, labels in valid_loader:\n",
        "        images, labels = images.to('cuda'), labels.to('cuda')\n",
        "        output = model.forward(images)\n",
        "        valid_loss += criterion(output, labels).item()\n",
        "        \n",
        "        ps = torch.exp(output)\n",
        "        equality = (labels.data == ps.max(dim=1)[1])\n",
        "        accuracy += equality.type(torch.FloatTensor).mean()\n",
        "    return valid_loss, accuracy"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "hiGrHg6Sto4c",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "outputId": "e31f92e9-0fa9-46e4-8143-f0a5f0f0f670"
      },
      "cell_type": "code",
      "source": [
        "epochs = 10\n",
        "print_every = 40\n",
        "steps = 0\n",
        "\n",
        "model.to('cuda')\n",
        "\n",
        "for e in range(epochs):\n",
        "    running_loss = 0\n",
        "    model.train()\n",
        "    for inputs, labels in trainloader:\n",
        "        steps+=1\n",
        "        \n",
        "        inputs, labels = inputs.to('cuda'), labels.to('cuda')\n",
        "        optimizer.zero_grad()\n",
        "        \n",
        "        outputs = model.forward(inputs)\n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        \n",
        "        running_loss += loss.item()\n",
        "        \n",
        "        if steps % print_every == 0:\n",
        "            model.eval()\n",
        "            \n",
        "            # Turn off gradients for validation, saves memory and computations\n",
        "            with torch.no_grad():\n",
        "                valid_loss, accuracy = validation(model, validloader, criterion)\n",
        "                \n",
        "            print(\"Epoch: {}/{}.. \".format(e+1, epochs),\n",
        "                  \"Training Loss: {:.3f}.. \".format(running_loss/print_every),\n",
        "                  \"Validation Loss: {:.3f}.. \".format(valid_loss/len(validloader)),\n",
        "                  \"Validation Accuracy: {:.3f}\".format(accuracy/len(validloader)))\n",
        "            \n",
        "            running_loss = 0\n",
        "            \n",
        "            model.train()"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch: 1/10..  Training Loss: 1.439..  Validation Loss: 0.561..  Validation Accuracy: 0.858\n",
            "Epoch: 1/10..  Training Loss: 1.427..  Validation Loss: 0.576..  Validation Accuracy: 0.866\n",
            "Epoch: 2/10..  Training Loss: 0.585..  Validation Loss: 0.553..  Validation Accuracy: 0.852\n",
            "Epoch: 2/10..  Training Loss: 1.391..  Validation Loss: 0.563..  Validation Accuracy: 0.854\n",
            "Epoch: 2/10..  Training Loss: 1.400..  Validation Loss: 0.490..  Validation Accuracy: 0.868\n",
            "Epoch: 3/10..  Training Loss: 1.195..  Validation Loss: 0.545..  Validation Accuracy: 0.860\n",
            "Epoch: 3/10..  Training Loss: 1.406..  Validation Loss: 0.515..  Validation Accuracy: 0.873\n",
            "Epoch: 4/10..  Training Loss: 0.374..  Validation Loss: 0.526..  Validation Accuracy: 0.886\n",
            "Epoch: 4/10..  Training Loss: 1.338..  Validation Loss: 0.557..  Validation Accuracy: 0.874\n",
            "Epoch: 4/10..  Training Loss: 1.306..  Validation Loss: 0.548..  Validation Accuracy: 0.869\n",
            "Epoch: 5/10..  Training Loss: 0.926..  Validation Loss: 0.536..  Validation Accuracy: 0.870\n",
            "Epoch: 5/10..  Training Loss: 1.362..  Validation Loss: 0.529..  Validation Accuracy: 0.882\n",
            "Epoch: 6/10..  Training Loss: 0.158..  Validation Loss: 0.479..  Validation Accuracy: 0.887\n",
            "Epoch: 6/10..  Training Loss: 1.348..  Validation Loss: 0.487..  Validation Accuracy: 0.884\n",
            "Epoch: 6/10..  Training Loss: 1.377..  Validation Loss: 0.526..  Validation Accuracy: 0.868\n",
            "Epoch: 7/10..  Training Loss: 0.665..  Validation Loss: 0.502..  Validation Accuracy: 0.879\n",
            "Epoch: 7/10..  Training Loss: 1.342..  Validation Loss: 0.458..  Validation Accuracy: 0.885\n",
            "Epoch: 7/10..  Training Loss: 1.284..  Validation Loss: 0.504..  Validation Accuracy: 0.867\n",
            "Epoch: 8/10..  Training Loss: 1.229..  Validation Loss: 0.473..  Validation Accuracy: 0.882\n",
            "Epoch: 8/10..  Training Loss: 1.211..  Validation Loss: 0.489..  Validation Accuracy: 0.868\n",
            "Epoch: 9/10..  Training Loss: 0.488..  Validation Loss: 0.457..  Validation Accuracy: 0.893\n",
            "Epoch: 9/10..  Training Loss: 1.258..  Validation Loss: 0.512..  Validation Accuracy: 0.868\n",
            "Epoch: 9/10..  Training Loss: 1.266..  Validation Loss: 0.469..  Validation Accuracy: 0.891\n",
            "Epoch: 10/10..  Training Loss: 1.042..  Validation Loss: 0.494..  Validation Accuracy: 0.887\n",
            "Epoch: 10/10..  Training Loss: 1.235..  Validation Loss: 0.441..  Validation Accuracy: 0.895\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "VxnQzXcMVDOR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "beab496b-ceb9-4725-e5d6-a713eb888760"
      },
      "cell_type": "code",
      "source": [
        "# TODO: Do validation on the test set\n",
        "# Do validation on the test set\n",
        "correct = 0\n",
        "total = 0\n",
        "with torch.no_grad():\n",
        "    model.eval()\n",
        "    for data in trainloader:\n",
        "        images, labels = data\n",
        "        images, labels = images.to(device), labels.to(device)\n",
        "        outputs = model(images)\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "        total += labels.size(0)\n",
        "        correct += (predicted == labels).sum().item()\n",
        "\n",
        "print('Accuracy achieved by the network on test images is: %d%%' % (100 * correct / total))"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy achieved by the network on test images is: 84%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "osZMfzH5ZAHd",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# TODO: Save the checkpoint \n",
        "model.class_to_idx = train_data.class_to_idx\n",
        "checkpoint = {\n",
        "    'epoch' : 10,\n",
        "    'arch' : 'vgg16',\n",
        "    'class_to_idx': model.class_to_idx,\n",
        "    'model_state_dic' : model.state_dict(),\n",
        "    'optimizer_state_dic' : optimizer.state_dict(),\n",
        "    'classifier' : model.classifier\n",
        "}\n",
        "torch.save(checkpoint, 'my_trained_model.pth')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "mtOaxPHtwMii",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        },
        "outputId": "a97023b3-8321-41dc-f488-1d521f458a3a"
      },
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n",
            "\n",
            "Enter your authorization code:\n",
            "··········\n",
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "hCirx6wax3Qk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 201
        },
        "outputId": "72d943a2-e234-4c3e-a7db-eb18aef2f911"
      },
      "cell_type": "code",
      "source": [
        "with open('/content/gdrive/My Drive/my_trained_model.pth', 'w') as f:\n",
        "  f.write('content')\n"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-37-6d887b578381>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/gdrive/My Drive/my_trained_model.pth'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'w'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m   \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'content'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/gdrive/My Drive/my_trained_model.pth'"
          ]
        }
      ]
    },
    {
      "metadata": {
        "id": "zy3U0--U4AAh",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}